# -*- coding: utf-8 -*-
"""

Analysis for EEG & grip strength sensor (gss) data

Part of Merle's Master Thesis
Version 1: 20.7.2021

"""
#-------------------------------------------------


""" 1. packages & variables """

# Install package to read xdf data
# I spent quite some time figuring this out: 
# You need to pip install pyxdf before being able to import it. 
# You can do this by copying one of the following lines into your terminal:

# Option 1: latest stable version (does not work for me)
# pip install pyxdf

# Option 2 (worked for me): latest developer version
# pip install git+https://github.com/xdf-modules/pyxdf.git
# I found this here: https://github.com/xdf-modules/pyxdf

# (The internet says you should install PyPDF2 
# to be able to import pyxdf, but that doesn't work)

# Now import package for reading in xdf data:
import pyxdf


# Python MNE for eeg data analysis / processing
# put this into your terminal to install python nme
    # pip install mne
# NME should be active by default and should already have the 
# necessary dependencies (numpy, scipy, and matplotlib).    
import mne


# glob for getting all files in a directory
import glob


# os for setting working directory
import os


# import pandas for using dataframes like I would in R (f*** you python)
import pandas as pd

# NumPy
import numpy as np

# --------------------------------------------------------

# working directory
os.chdir("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/")

# get list of all xdf files in my directory 
# (the asterix in the path means the name of the 
# file can be anything as long as it has an .xdf ending)
file_list = glob.glob("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/*.xdf")

# set number of subjects as number of xdf files in directory
subj_n = len(file_list)

# loop xdf file names in file_list aka participants:
for file_name in file_list:

    
    """ read in XDF data """
    streams, header = pyxdf.load_xdf(file_name)

    # Raise a hue & cry if data doesn't have 4 streams!
    assert len(streams) == 4  # 1 EEG markers (?), 1 EEG, 1 stim channel, 1 gss channel

    
    """ Build NME data object from scratch """
    # stream 0: general info? actiCHampMarkers
    # stream 1: Actichamp - EEG data
    # stream 2: PsychoPyMarkers - Experiment markers
    # stream 3: Arduino - Grip strength sensor data    
    
    
    """ Create info for Raw Object"""
    # Sampling rate: I took the eeg sampling rate, in the tutorial script they took a value from stream 0
    # but that was 0 in our case???
    sampling_freq = float(streams[1]["info"]["nominal_srate"][0]) # in Hertz
    # name and classify channels
    ch_names = [f'EEG{n:03}' for n in range(1, 129)] + ['GSS']
    ch_types = ['eeg'] * 128 + ['emg']
    n_channels = 129

    # combine information 
    info = mne.create_info(ch_names, ch_types = ch_types, sfreq = sampling_freq)
    
    # add dataset name
    # (change this if the files names of the exp files are named differently)
    info['description'] = file_name[len(file_name)-30 : len(file_name)-4 : 1]
   
    # look at the info
    #print(info)

    """ Create Raw object """ 
   
    # structure should be: rows: channels, columns: sample points)
    
    # first get EEG data from stream 1
    eeg_data = np.array(streams[1]["time_series"].T)
    # transform all values in eeg_data from Microvolt to Volt 
    # as NME expects EEG data to be measured in Volt (why tho)
    eeg_data[:] *= 1e-6
    
    # now append grip strength sensor data from stream 3:
    # I have a different sampling rate here so I think I'll interpolate
    # --> problem: timestamps of EEG data, Psychopy Markers and GSS data don't match!
   
    # Idea: Create NA array, fill in values at the correct time points, interpolate missing data
    # I think cubic interpolation is nice for time series data, but not sure. 
    
    #pd.DataFrame.interpolate
    
    
    # use this to combine to Raw data object
    #mne.io.RawArray
   
   
   
   
   # To do: Add gss data and create raw object
   
   
   
   
   
   
   
   # Needs Fixing: 
    # Plot data (I took a small excerpt from the start of the experiment)
    # I can't get this to work! 
    # Where are the gss data?? Why are the stim markers shown as a line and not as several vertical lines?
    raw.plot(scalings = 'auto', color = dict(eeg='red', stim='blue', emg = 'black'), duration = 10, start = 1000)


    """ Look at the data we just saved in an nme raw object """
    # The following part was my first approach for reading in the data, 
    # but I think it's useful to have a look at the structure 
    # load xdf file of chosen participant:
    data, header = pyxdf.load_xdf(file_name)


    # have a look at every stream in the data:
    # timestamps??? for what??: stream 0 
    # EEG data & timestamps: stream 1
    # experiment markers: stream 2
    # sensor data: stream 3
              
    """ stream 1: get EEG data for each electrode """    
    
    # look at the data:
    # len(data[1]['time_series'][0])
    # data[1]['time_stamps']
    
    # get timestamps and values from each electrode and convert to pandas df as well 
    # --> 1 column for each electrode & timestamp (= 128 x 2 =  256 columns)
    # --> 1 row for each point in time (about 186013 rows)
    
    # There's one array with 128 values for each point in time, so first, 
    # bind all of those arrays together as rows, so we have 1 column for each electrode    
    timeseries_df = pd.DataFrame(data[1]['time_series'])

    # now add the first column with the time stamps 
    timeseries_df['timestamp'] = data[1]['time_stamps']

    # create column names (first one is "timestamps", the other ones are the electrode numbers)
    colnames = ["timestamps"]
    for i in range(1, len(data[1]['time_series'][0])+1): # range: 1 - 128
        colnames.append("electrode_" + str(i))
    # assign new column names
    timeseries_df.columns = colnames
    
    
    """ stream 2: get grip strength sensor data """
    # There are timestamps here as well, so get those and the sensor data   
    
    # look at the data:
    # 137 triggers wih matching time stamps
    # len(data[2]['time_series']) 
    # len(data[2]['time_stamps'])
           
    # Idea: Find all rows where the timestamps match, then add a new column containg the triggers 
    # at the correct time points and NAs where the timepoints didn't match       
    
    # get indices of rows with matching timestamps    
    indices = timeseries_df.timestamps.loc[data[2]['time_stamps']] # there are no matches?!


    # Problem: The EEG and trigger timestamps don't match AT ALL. What is this shit.
    
    # EEG timestamps
    min(timeseries_df.timestamps)
    max(timeseries_df.timestamps)
    
    # experiment trigger timestamps
    min(data[1]['time_stamps'])
    max(data[1]['time_stamps'])
    
    # gss timestamps
    min(data[3]['time_stamps'])
    max(data[3]['time_stamps'])

    # gss timestamps and experiment timestamps are more or less
    # in the same range, EEG timestamps are way lower?!

        
# END LOOP PARTICIPANTS 

