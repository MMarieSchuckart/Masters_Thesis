# -*- coding: utf-8 -*-
"""

Analysis for EEG & grip strength sensor (gss) data

Part of Merle's Master Thesis
Version 1: 20.7.2021

"""

# -----------------------------------------------------------

""" 1. packages & variables """

# Install package to read xdf data
# I spent quite some time figuring this out: 
# You need to pip install pyxdf before being able to import it. 
# You can do this by copying one of the following lines into your terminal:

# Option 1: latest stable version (does not work for me)
# pip install pyxdf

# Option 2 (worked for me): latest developer version
# pip install git+https://github.com/xdf-modules/pyxdf.git
# I found this here: https://github.com/xdf-modules/pyxdf

# (The internet says you should install PyPDF2 
# to be able to import pyxdf, but that doesn't work)

# Now import package for reading in xdf data:
import pyxdf


# Python MNE for eeg data analysis / processing
# put this into your terminal to install python nme
    # pip install mne
# NME should be active by default and should already have the 
# necessary dependencies (numpy, scipy, and matplotlib).    
import mne


# glob for getting all files in a directory
import glob


# os for setting working directory
import os


# import pandas for using dataframes like I would in R (f*** you python)
import pandas as pd



# --------------------------------------------------------


# Set working directory
os.chdir("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/")

# Get list of all xdf files in my directory 
# (the asterix in the path means the name of the 
# file can be anything as long as it has an .xdf ending)
file_list = glob.glob("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/*.xdf")

# Set number of subjects as number of xdf files in directory
subj_n = len(file_list)

# Loop xdf file names in file_list aka participants:
for file_name in file_list:

    streams, header = pyxdf.load_xdf(file_name)

    # get time series data from stream 1 (eeg data)?   
    data = streams[1]["time_series"].T

    # raise error if data has not 3 channels
    assert data.shape[0] == 3  # 1 EEG, 1 stim channel, 1 gss channel

    data = data[::2]  # just take every other element (take only sensor 1, 3, 5, 7,...) 
    # --> why only take half of the channels?????
    # which channels do I need?

    data[:2] *= (1e-6 / 50 / 2)  # transform uV -> V and preamp gain (what does preamp gain mean???)
    
    # Create info
    # Sampling rate: I took the eeg sampling rate, in the tutorial script they took a value from stream 0
    sfreq = float(streams[1]["info"]["nominal_srate"][0])
    # create info
    info = mne.create_info(3, sfreq, ["eeg", "stim", "emg"])
    # create raw object containing info + data
    raw = mne.io.RawArray(data, info)

    # Plot data (I took a small excerpt from the start of the experiment)
    # I can't get this to work! 
    # Where are the gss data?? Why are the stim markers shown as a line and not as several vertical lines?
    raw.plot(scalings = 'auto', color = dict(eeg='red', stim='blue', emg = 'black'), duration = 10, start = 1000)


    """ Look at the data we just saved in an nme raw object """
    # The following part was my first approach for reading in the data, 
    # but I think it's useful to have a look at the structure 
    # load xdf file of chosen participant:
    data, header = pyxdf.load_xdf(file_name)


    # have a look at every stream in the data:
    # timestamps??? for what??: stream 0 
    # EEG data & timestamps: stream 1
    # experiment markers: stream 2
    # sensor data: stream 3
              
    """ stream 1: get EEG data for each electrode """    
    
    # look at the data:
    # len(data[1]['time_series'][0])
    # data[1]['time_stamps']
    
    # get timestamps and values from each electrode and convert to pandas df as well 
    # --> 1 column for each electrode & timestamp (= 128 x 2 =  256 columns)
    # --> 1 row for each point in time (about 186013 rows)
    
    # There's one array with 128 values for each point in time, so first, 
    # bind all of those arrays together as rows, so we have 1 column for each electrode    
    timeseries_df = pd.DataFrame(data[1]['time_series'])

    # now add the first column with the time stamps 
    timeseries_df['timestamp'] = data[1]['time_stamps']

    # create column names (first one is "timestamps", the other ones are the electrode numbers)
    colnames = ["timestamps"]
    for i in range(1, len(data[1]['time_series'][0])+1): # range: 1 - 128
        colnames.append("electrode_" + str(i))
    # assign new column names
    timeseries_df.columns = colnames
    
    
    """ stream 2: get grip strength sensor data """
    # There are timestamps here as well, so get those and the sensor data   
    
    # look at the data:
    # 137 triggers wih matching time stamps
    # len(data[2]['time_series']) 
    # len(data[2]['time_stamps'])
           
    # Idea: Find all rows where the timestamps match, then add a new column containg the triggers 
    # at the correct time points and NAs where the timepoints didn't match       
    
    # get indices of rows with matching timestamps    
    indices = timeseries_df.timestamps.loc[data[2]['time_stamps']] # there are no matches?!


    # Problem: The EEG and trigger timestamps don't match AT ALL. What is this shit.
    
    # EEG timestamps
    min(timeseries_df.timestamps)
    max(timeseries_df.timestamps)
    
    # experiment trigger timestamps
    min(data[1]['time_stamps'])
    max(data[1]['time_stamps'])
    
    # gss timestamps
    min(data[3]['time_stamps'])
    max(data[3]['time_stamps'])

    # gss timestamps and experiment timestamps are more or less
    # in the same range, EEG timestamps are way lower?!

        
# END LOOP PARTICIPANTS 

