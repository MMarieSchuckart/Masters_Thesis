# -*- coding: utf-8 -*-
"""

Analysis for EEG & grip strength sensor (gss) data

Part of Merle's Master Thesis
Version 1: 4.8.2021

"""
#-------------------------------------------------


""" 1. packages & variables """

# Install package to read xdf data
# I spent quite some time figuring this out: 
# You need to pip install pyxdf before being able to import it. 
# You can do this by copying one of the following lines into your terminal:

# Option 1: latest stable version (does not work for me)
# pip install pyxdf

# Option 2 (worked for me): latest developer version
# pip install git+https://github.com/xdf-modules/pyxdf.git
# I found this here: https://github.com/xdf-modules/pyxdf

# (The internet says you should install PyPDF2 
# to be able to import pyxdf, but that doesn't work)

# Now import package for reading in xdf data:
import pyxdf


# Python MNE for eeg data analysis / processing
# put this into your terminal to install python nme
    # pip install mne
# NME should be active by default and should already have the 
# necessary dependencies (numpy, scipy, and matplotlib).    
import mne


# glob for getting all files in a directory
import glob


# os for setting working directory
import os


# import pandas for using dataframes like I would in R (f*** you python)
import pandas as pd

# NumPy
import numpy as np

# --------------------------------------------------------

# working directory
os.chdir("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/")

# get list of all xdf files in my directory 
# (the asterix in the path means the name of the 
# file can be anything as long as it has an .xdf ending)
file_list = glob.glob("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/*.xdf")

# set number of subjects as number of xdf files in directory
subj_n = len(file_list)

# loop xdf file names in file_list aka participants:
for file_name in file_list:

    
    """ read in XDF data """
    streams, header = pyxdf.load_xdf(file_name)

    # Raise a hue & cry if data doesn't have 4 streams!
    assert len(streams) == 4  # 1 EEG markers (?), 1 EEG, 1 stim channel, 1 gss channel

    
    """ Build NME data object from scratch """
    # stream 0: general info? actiCHampMarkers (whatever that is)
    # stream 1: Actichamp - EEG data
    # stream 2: PsychoPyMarkers - Experiment markers
    # stream 3: Arduino - Grip strength sensor data    

    # each stream contains timestamps (measured in seconds)
    
    
    """ Create info for Raw Object for EEG data"""
    # Sampling rate: 500 Hz
    sampling_freq = float(streams[1]["info"]["nominal_srate"][0]) # in Hertz
    
    # name and classify channels
    ch_names = [f'EEG_{n:03}' for n in range(1, 129)]
    ch_types = ['eeg'] * 128 
    n_channels = 126

    # combine information 
    info_eeg = mne.create_info(ch_names, ch_types = ch_types, sfreq = sampling_freq)
    
    # add name of the curent dataset (I could also add information like age or gender here)
    # (change this if the files names of the exp files are named differently)
    info_eeg['description'] = file_name[len(file_name)-30 : len(file_name)-4 : 1]
   
    # look at the info
    #print(info_eeg)


    """ Create data for Raw object for EEG data""" 
    
    # structure should be: 
        # rows: channels
        # columns: sample points
    
    # get EEG data from stream 1:
    # 128 arrays (1 for each electrode), 186013 sampling points
    data_eeg = np.array(streams[1]["time_series"].T) 

    # transform all values in eeg_data from Microvolt to Volt 
    # as NME expects EEG data to be measured in Volt (why tho)
    data_eeg[:] *= 1e-6
    
    
    """ Create Raw object for EEG data""" 
    # combine info, data & add events (triggers)
    eeg_Raw = mne.io.RawArray(data_eeg, info_eeg)
  
    
  
    """ Add Events to Raw Object for EEG data"""
    eeg_Raw.add_events(eog_events, 'STI 014')



    #info = mne.create_info(['STI'], raw.info['sfreq'], ['stim'])
    #stim_raw = mne.io.RawArray(stim_data, info)
    #raw.add_channels([stim_raw], force_update_info=True)
  
    
  
    
  
    
  
    
  
    
  
    
  
    
    

    # now append grip strength sensor data from stream 3:
    # only 12707 sampling points here compared to 186013 for the EEG data 
    # --> lower sampling rate than EEG data
    # len(streams[3]["time_series"]) 
    # len(streams[1]["time_series"]) 
    
    # Also, the timestamps are in the same range, but they do not match. See:  
    # Compare timestamps: Is there a match (aka a value == True) anywhere in the resulting array?  
    # np.any(np.in1d(streams[1]["time_stamps"], streams[3]["time_stamps"])) # Nope
    
    # Idea: 
    # Create second Raw object for GSS data, then resample to 550 Hz, 
    # then add as new channel.

    """ Create info for Raw Object for GSS data"""
    # Sampling rate: I took the eeg sampling rate, in the tutorial script they took a value from stream 0
    # but that was 0 in our case???
    
    # to get the sampling frequency of the Arduino, I took 400 timestamp values and 
    # their "neighbors" and calculated the difference to get the mean time that passes between the samples. 
    # If you divide 1 by this value and round it you get a sampling rate of 45 Hz:   
    sampling_freq_gss = np.round(1/np.mean(streams[3]["time_stamps"][300:700] - streams[3]["time_stamps"][299:699]))

    # quick check: if you do the same for the EEG timestamps, 
    # you get 500 as a result, which corresponds to the sampling rate from the xdf info, so this is correct. 
    #np.round(1/np.mean(streams[1]["time_stamps"][300:700] - streams[1]["time_stamps"][299:699]))
    
    # name and classify channel
    ch_names_gss = ['GSS']
    ch_types_gss = ['emg']
    n_channels_gss = 1

    # combine information 
    info_gss = mne.create_info(ch_names_gss, ch_types = ch_types_gss, sfreq = sampling_freq_gss)
    
    # look at the info
    #print(info_gss)

    """ Get data & Create Raw Object for GSS data """
    data_gss = np.array(streams[3]["time_series"].T) 
    gss_Raw = mne.io.RawArray(data_gss, info_gss)

    # resample gss data to 500 Hz to match the eeg data

    gss_Raw = gss_Raw.resample(500)

    # check if it worked: 
    # gss_Raw.__len__() # 141189 sample points --> Yup! But still a bit shorter than the EEG data 

"""
# TO DO: 
#Fix this
    # add channel to EEG Raw object
    eeg_Raw.add_channels = pass
# Add events
# Find out what to do about the timestamps
"""

    # Plot data (I took a small excerpt from the start of the experiment)
    # I can't get this to work! 
    # Where are the gss data?? Why are the stim markers shown as a line and not as several vertical lines?
    raw.plot(scalings = 'auto', color = dict(eeg = 'red', stim = 'blue', emg = 'black'), duration = 10, start = 1000)


    raw.copy().pick_types(meg = False, eeg = False, stim = True).plot(start = 1000, duration = 100)


        
# END LOOP PARTICIPANTS 

