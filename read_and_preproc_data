# -*- coding: utf-8 -*-
"""

Analysis for EEG & grip strength sensor (gss) data

Part of Merle's Master Thesis
Version 1: 17.8.2021

"""
#-------------------------------------------------

""" settings """

""" 1.1 load packages """

# Install package to read xdf data
# I spent quite some time figuring this out: 
# You need to pip install pyxdf before being able to import it. 
# You can do this by copying one of the following lines into your terminal:

# Option 1: latest stable version (does not work for me)
# pip install pyxdf

# Option 2 (worked for me): latest developer version
# pip install git+https://github.com/xdf-modules/pyxdf.git
# I found this here: https://github.com/xdf-modules/pyxdf

# (The internet says you should install PyPDF2 
# to be able to import pyxdf, but that doesn't work)

# Now import package for reading in xdf data:
import pyxdf

# Python MNE for eeg data analysis / processing
# put this into your terminal to install python nme
    # pip install mne
# NME should be active by default and should already have the 
# necessary dependencies (numpy, scipy, and matplotlib).    
import mne

# glob for getting all files in a directory
import glob

# os for setting working directory
import os

# import pandas for using dataframes like I would in R (f*** you python)
import pandas as pd

# For getting descripives: NumPy
import numpy as np

# for getting fractional parts of number (aka ms from the timestamps)
import math

# for turning nested list into 1D list
from itertools import chain


# --------------------------------------------------------

""" 1.2 set variables for the preproc"""


""" 1.2.1 set variables for the EEG data preproc """
# highpass filter (use 12.5 Hz for beta band - correct frequency?)
eeg_bandpass_fmin = 12.4 
# lowpass filter (use 30 Hz for beta band)
eeg_bandpass_fmax = 30
# set type of window filter
eeg_window_filter_type = 'hamming'
# set number of ????
n_jobs = 1

# set cutoffs for epoching
eeg_prestim_cutoff = -1 # use seconds here; which intervall makes sense in my case?
eeg_poststim_cutoff = 1 


# set variables for the ICA:
#ica = ICA(method = 'fastica', 
#          random_state = 42, 
#          n_components = 2) # set number of independent components! How many????
    

""" 1.2.2 set variables for the gss data preproc """
# highpass filter:
sensor_bandpass_fmin = 1

# lowpass filter (which cutoff should I use???)
sensor_bandpass_fmax = 20

# set type of window filter
sensor_window_filter_type = 'hamming'

# set filter design
# = default option; gives improved attenuation using fewer samples than “firwin2”
eeg_fir_design = 'firwin' 


""" 1.2.3 settings for epoching """
# set cutoffs (in seconds) for epoching:
sensor_prestim_cutoff = -1 # which intervall makes sense in my case?
sensor_poststim_cutoff = 1 

# --------------------------------------------------------

""" 2. read in data """

# working directory
os.chdir("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/")

# get list of all xdf files in my directory 
# (the asterix in the path means the name of the 
# file can be anything as long as it has an .xdf ending)
file_list = glob.glob("/Users/merle/Desktop/Masterarbeit/Master_Testdaten/*.xdf")

# set number of subjects as number of xdf files in directory
subj_n = len(file_list)

# Create empty lists to keep track of plots (before and after filtering)
eeg_figs_before_filtering = []
eeg_figs_after_filtering = []

# loop xdf file names in file_list aka participants:
for file_name in file_list:
    
    """ 2.1 read in XDF data """
    streams, header = pyxdf.load_xdf(file_name)

    # Raise a hue & cry if data doesn't have 4 streams!
    assert len(streams) == 4  # 1 EEG markers (?), 1 EEG, 1 stim channel, 1 gss channel

    
    """ 2.2 Build NME data object from scratch """
    # stream 0: general info? actiCHampMarkers (whatever that is)
    # stream 1: Actichamp - EEG data
    # stream 2: PsychoPyMarkers - Experiment markers
    # stream 3: Arduino - Grip strength sensor data    

    # each stream contains timestamps (measured in seconds)
    
    
    """ 2.2.1 Create info for Raw Object for EEG data"""
    # Sampling rate: 500 Hz
    sampling_freq = float(streams[1]["info"]["nominal_srate"][0]) # in Hertz
    
    # name and classify channels
    ch_names = [f'EEG_{n:03}' for n in range(1, 129)]
    ch_types = ['eeg'] * 128 
    n_channels = 126

    # combine information 
    info_eeg = mne.create_info(ch_names, 
                               ch_types = ch_types, 
                               sfreq = sampling_freq)
    
    # add name of the curent dataset (I could also add information like age or gender here)
    # (change this if the files names of the exp files are named differently)
    info_eeg['description'] = file_name[len(file_name)-30 : len(file_name)-4 : 1]
   
    # look at the info
    #print(info_eeg)
   


    """ 2.2.2 Get EEG data for Raw object""" 
    # structure should be: 
        # rows: channels
        # columns: sample points
    
    # get EEG data from stream 1:
    # 128 arrays (1 for each electrode), 186013 sampling points
    data_eeg = np.array(streams[1]["time_series"].T) 

    # transform all values in eeg_data from Microvolt to Volt 
    # as NME expects EEG data to be measured in Volt (why tho)
    data_eeg[:] *= 1e-6
    
        
    """ 2.2.3 Create Raw object for EEG data""" 
    # combine info & eeg data
    eeg_Raw = mne.io.RawArray(data_eeg, info_eeg)


    """ 2.2.4 Add Events & GSS data as Annotations to Raw Object"""
       
    # If you look at the first timestamp of stream 1, 2 & 3, you can see that 
    # they don't match. The EEG for example started recording 
    # way earlier than the Arduino:
    #streams[1]["time_stamps"][0] 
    #streams[3]["time_stamps"][0] 
   
    # This means I need to include information on when the 
    # Triggers and GSS values started or else MNE assumes 
    # the streams all started at the same time which is not the case.
   
    # If you look at when the streams were created, 
    # you see that they are not 0, which means they're 
    # probably all relative to some shared event 
    # (like turning on the computer? Idk.)
    #streams[3]['info']['created_at']
    #streams[2]['info']['created_at']
    #streams[1]['info']['created_at'] 
   
    # Solution: Set onset of EEG stream to None (that's the default anyway)
    # and subtract onset of EEG stream from GSS & Trigger data. 
    # This way the timestamps are relative to the EEG onset.
       
    # get difference between EEG onset and onset of Triggers
    eeg_onset = streams[1]["time_stamps"][0] 
    trigger_timestamps = streams[2]["time_stamps"] - eeg_onset
    gss_timestamps = streams[3]["time_stamps"] - eeg_onset
    

    # Now get Trigger & GSS values

    # get names of triggers (it's a nested list in the xdf file)    
    trigger_descriptions = streams[2]["time_series"]
    # turn nested list into "normal" one dimensional list
    trigger_descriptions = list(chain.from_iterable(trigger_descriptions)) 
    
    
    # get gss values (it's a nested list in the xdf file)    
    gss_values = streams[3]["time_series"]
    # turn nested list into "normal" one dimensional list
    gss_values = list(chain.from_iterable(gss_values)) 
    
    # save trigger descriptions & their onsets as annotations for our Raw object
    triggers_annot = mne.Annotations(onset = trigger_timestamps, duration = .001, description = trigger_descriptions)
    
    # save GSS values & their onsets as annotations
    gss_annot = mne.Annotations(onset = gss_timestamps, duration = 0.001, description = gss_values) 
    
    # there's a bug in MNE, you have to set a filename to be able to use annotations
    eeg_Raw._filenames = ['dummy_file_name'] 
   
    # set annotations
    eeg_Raw.set_annotations(triggers_annot + gss_annot)

    """ 2.2.5 plot raw data """
    # (careful, this takes a lot of time!)
    # I filtered the data a bit, but this is only for the 
    # representation in the plot, it doesn't affect the data!
    # eeg_Raw.plot(start = 5, duration = 1, highpass = 13, lowpass = 30)


# --------------------------------------------------------
    """ 3. Preprocessing """


    """ 3.1 pick relevant eeg channels, drop all data from sensor locations we don't need """
    # I just picked the first 3 channels to test if it works - change to actual names later  
    eeg_Raw.pick_channels(['EEG_001', 'EEG_002', 'EEG_003']) 


    """ get epochs """    
    # max_force_xxx -> initiale maximalkraft der Probandin
    # blockn -> Blöcke 0-3, 0=Training

    # 5 triggers per trial:
    #    1. epoch_vo_start -> start of epoch (= trial?)
    #            vo = uni visual, av = audiovisual, ao = uni auditive
    #    2. baseline -> start jittered Baseline (baseline of what???)
    #    3. fix_cross
    #    4. trial_start_sfb_0.3_sfc_0.25 
    #       -> start feedback, 
    #        sfb = Skalierung Feedback  
    #        sfc = prozentuale Maximalkraft (e.g. 0.25%)
    #    5. end_trial


    # create events from annotations
    # use regular expression to get only trigger values, not gss annotations
    # the regular expression looks for strings containing b,t,e,f or m at 
    # the beginning of the string
    # Also, round strings instead of truncating them so we get unique time values
    events, event_id = mne.events_from_annotations(eeg_Raw, regexp='(^[btefm]).*$', use_rounding = True)
    
    # set length of trials around events (in seconds)
    epoch_tmin, epoch_tmax = -1, 1  

    # there are still non-unique values in the event time stamps
    # so merge events (can't keep them both separately),
    # but doesn't matter because it seems like trial_end and 
    # start of new block sometimes share a timestamp
    epochs = mne.Epochs(eeg_Raw, events, event_id, 
                        epoch_tmin - 0.5, 
                        epoch_tmax + 0.5, 
                        baseline = None, 
                        preload = True, 
                        event_repeated = "merge")


    # TO DO: The way I cut the epochs doesn't make sense. 
    # I guess I only need whole trials as epochs, 
    # ideally saved separately by block?

    # Make a figure for each participant's data before and after filtering 
    # and append to figs_before list:
    # eeg_figs_before_filtering.append(eeg_Raw.plot_psd(show = False))
    # eeg_figs_after_filtering.append(eeg_Raw_filt.plot_psd(show = False))


    # loop epochs, filter the data, then get rid of bad trials
    for epoch in epochs: 
        
        """ Baseline correction to get rid of slow drifts """



    

        """ clean data using ICA """
        # does this make sense in my case?
    


        """ filter the eeg & gss data (use ICA cleaned data) """
        # Filter data of each subject 

        # Bandpass filter for the data (creates a copy with filtered data)
        eeg_Raw_filt = eeg_Raw.copy().filter(bandpass_fmin = eeg_bandpass_fmin, 
                                             bandpass_fmax = eeg_bandpass_fmax, 
                                             l_trans_bandwidth = 'auto',
                                             h_trans_bandwidth = 'auto', 
                                             filter_length = 'auto', 
                                             phase = 'zero', # compensate for delay of the filter
                                             fir_window = eeg_window_filter_type, 
                                             fir_design = eeg_fir_design, 
                                             n_jobs = n_jobs)

        # visual rejection of bad epochs




        """ 3.4 exclude bad trials """
        # use this to exclude bad trials!)
    
        fig = eeg_Raw.plot()
        fig.canvas.key_press_event('a')





    """ gss filtering??? """
    # get "4–12 Hz range since this range is where a majority of the tremor is contained" 
    # (Archer et al., 2018 --> Elble, 1986; Elble et al., 1994; Deuschl and Elble, 2000; Neely et al., 2015)






""" Frequency Analysis """
    
    
    
    
    
    
""" Connectivity Analysis """








""" ---------------------- Useful stuff I might need later ------------------------"""

    
    # Arduino Sampling Frequency
    # to get the sampling frequency of the Arduino, I took 400 timestamp values and 
    # their "neighbors" and calculated the difference to get the mean time that passes between the samples. 
    # If you divide 1 by this value and round it you get a sampling rate of 45 Hz:   
    sampling_freq_gss = np.round(1/np.mean(streams[3]["time_stamps"][300:700] - streams[3]["time_stamps"][299:699]))

    # quick check: if you do the same for the EEG timestamps, 
    # you get 500 as a result, which corresponds to the sampling rate from the xdf info, so this is correct. 
    #np.round(1/np.mean(streams[1]["time_stamps"][300:700] - streams[1]["time_stamps"][299:699]))

